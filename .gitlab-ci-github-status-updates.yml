variables:
  GITHUB_AUTH: "Authorization: bearer $GITHUB_BOT_TOKEN_REPO_STATUS"

  GITHUB_STATUS_API_URL: "https://api.github.com/repos/mendersoftware/$CI_PROJECT_NAME/statuses/$CI_COMMIT_SHA"
  GITHUB_STATUS_API_JSON_F: '{"state": "%s", "context": "ci/gitlab", "target_url": "%s", "description": "%s"}'

stages:
  # These have no effect and are only for documentation purposes. .pre and .post
  # stages run at the very start and very end of a pipeline, regardless of where
  # they are defined.
  - .pre
  - .post

.github_status_template:
  tags:
    - mender-qa-worker-generic-light
  # Keep overhead low by using a small image with curl preinstalled.
  image: appropriate/curl
  before_script:
    - |
      send_status() {
        local status="$1"
        local message="$2"

        local json="$(printf "$GITHUB_STATUS_API_JSON_F" "$status" "$CI_PIPELINE_URL" "$message")"
        local ret=0
        local output="$(curl -f -H "$GITHUB_AUTH" -d "$json" "$GITHUB_STATUS_API_URL")" || ret=$?
        if [ $ret -ne 0 ]; then
          if echo "$output" | grep -q "This SHA and context has reached the maximum number of statuses"; then
            # This can happen for pipelines that keep running on the same master commit over and
            # over, such as mender-api-docs.
            return 0
          fi
          echo "$output" 1>&2
        fi
        return $ret
      }

github:start:
  extends: .github_status_template
  stage: .pre
  script:
    - send_status pending "Pipeline running on Gitlab"

github:success:
  extends: .github_status_template
  stage: .post
  when: on_success
  script:
    - send_status success "Pipeline passed on Gitlab"

github:failure:
  extends: .github_status_template
  stage: .post
  when: on_failure
  script:
    - send_status failure "Pipeline failed on Gitlab"
